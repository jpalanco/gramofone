From 6b55c38be73a5a60297656a7bd96bc8e7ca3f251 Mon Sep 17 00:00:00 2001
From: John Crispin <blogic@openwrt.org>
Date: Tue, 19 Mar 2013 12:34:09 +0100
Subject: [PATCH] FON: add fon,config driver

This driver loads the fon config from flash and exports it via /proc/fon/*

Signed-off-by: John Crispin <blogic@openwrt.org>
---
 drivers/Makefile         |    1 +
 drivers/fon/Makefile     |    1 +
 drivers/fon/fon-eeprom.c |  150 ++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 152 insertions(+)
 create mode 100644 drivers/fon/Makefile
 create mode 100644 drivers/fon/fon-eeprom.c

Index: linux-3.3.8/drivers/Makefile
===================================================================
--- linux-3.3.8.orig/drivers/Makefile	2013-08-15 21:22:53.197843716 +0200
+++ linux-3.3.8/drivers/Makefile	2013-08-15 21:22:55.045843795 +0200
@@ -133,3 +133,5 @@
 obj-$(CONFIG_HYPERV)		+= hv/
 
 obj-$(CONFIG_PM_DEVFREQ)	+= devfreq/
+obj-y				+= fon/
+
Index: linux-3.3.8/drivers/fon/Makefile
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.3.8/drivers/fon/Makefile	2013-08-15 21:22:55.045843795 +0200
@@ -0,0 +1 @@
+obj-y += fon-eeprom.o
Index: linux-3.3.8/drivers/fon/fon-eeprom.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.3.8/drivers/fon/fon-eeprom.c	2013-08-16 20:36:32.100619904 +0200
@@ -0,0 +1,147 @@
+/*
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 as published
+ * by the Free Software Foundation.
+ *
+ * Copyright (C) 2013 John Crispin <blogic@openwrt.org>
+ */
+
+#include <linux/fs.h>
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/proc_fs.h>
+#include <linux/seq_file.h>
+#include <linux/mtd/mtd.h>
+#include <linux/reboot.h>
+#include <linux/of_platform.h>
+
+struct boardconfig
+{
+	unsigned int lock;
+	unsigned char mac[6];
+	unsigned char serial[11];
+	unsigned char sku[10];
+	unsigned char key[32];
+};
+
+static struct boardconfig fon_config;
+
+static struct proc_dir_entry *procdir, *procsku, *procmac, *procserial, *prockey, *proclock, *procupgrade;
+
+static int procsku_read(char *buf, char **start, off_t offset,
+					int len, int *eof, void *unused)
+{
+	return sprintf(buf, fon_config.sku);
+}
+
+static int prockey_read(char *buf, char **start, off_t offset,
+					int len, int *eof, void *unused)
+{
+	int i, rlen = 0;
+
+	for(i = 0; i < 32; i++)
+		rlen += sprintf(&buf[rlen], "%02X", fon_config.key[i]);
+
+	return rlen;
+}
+
+static int procserial_read(char *buf, char **start, off_t offset,
+					int len, int *eof, void *unused)
+{
+	return sprintf(buf, fon_config.serial);
+}
+
+static int proclock_read(char *buf, char **start, off_t offset,
+					int len, int *eof, void *unused)
+{
+	return sprintf(buf, "%d", fon_config.lock == 0x4c4c4c4c);
+}
+
+static int procmac_read(char *buf, char **start, off_t offset,
+					int len, int *eof, void *unused)
+{
+	return sprintf(buf, "%02X-%02X-%02X-%02X-%02X-%02X",
+			fon_config.mac[0], fon_config.mac[1],
+			fon_config.mac[2], fon_config.mac[3],
+			fon_config.mac[4], fon_config.mac[5]);
+}
+
+int http_restart = 0;
+
+static int procupgrade_write(struct file *file, const char *buffer,
+			unsigned long count, void *data)
+{
+	char magic[5] = "0000";
+
+	if (count <= 4)
+		return -EINVAL;
+
+	if (copy_from_user(magic, buffer, 4))
+		return -EFAULT;
+
+	if (!strcmp(magic, "1234")) {
+		http_restart = 1;
+		kernel_restart(NULL);
+	}
+
+	return count;
+}
+
+static int fon_proc_init(void)
+{
+	procdir = proc_mkdir("fon", NULL);
+	if (!procdir)
+		return -1;
+
+	procsku = create_proc_entry("sku", 0, procdir);
+	if (procsku)
+		procsku->read_proc = procsku_read;
+
+	procmac = create_proc_entry("mac", 0, procdir);
+	if (procmac)
+		procmac->read_proc = procmac_read;
+
+	procserial = create_proc_entry("serial", 0, procdir);
+	if (procserial)
+		procserial->read_proc = procserial_read;
+
+	prockey = create_proc_entry("key", 0, procdir);
+	if (prockey)
+		prockey->read_proc = prockey_read;
+
+	proclock = create_proc_entry("lock", 0, procdir);
+	if (proclock)
+		proclock->read_proc = proclock_read;
+
+	procupgrade = create_proc_entry("upgrade", 0, procdir);
+	if (procupgrade)
+		procupgrade->write_proc = procupgrade_write;
+
+	return 0;
+}
+
+static int fon_config_probe(struct platform_device *pdev)
+{
+	size_t retlen;
+	struct mtd_info *mtd;
+
+	mtd = get_mtd_device_nm("fon_data");
+	if (IS_ERR(mtd)) {
+		dev_err(&pdev->dev, "failed to get mtd device \"fon_data\"\n");
+		return PTR_ERR(mtd);
+	}
+
+	mtd_read(mtd, 0x0000, sizeof(struct boardconfig), &retlen, (u_char *) &fon_config);
+
+	return fon_proc_init();
+}
+
+static struct platform_driver fon_config_driver = {
+	.probe = fon_config_probe,
+	.driver = {
+		.name = "fon-config",
+		.owner = THIS_MODULE,
+	},
+};
+
+module_platform_driver(fon_config_driver);
Index: linux-3.3.8/kernel/sys.c
===================================================================
--- linux-3.3.8.orig/kernel/sys.c	2012-06-01 09:16:13.000000000 +0200
+++ linux-3.3.8/kernel/sys.c	2013-08-16 20:55:39.276668944 +0200
@@ -362,6 +362,7 @@
  *	Shutdown everything and perform a clean reboot.
  *	This is not safe to call in interrupt context.
  */
+extern int http_restart;
 void kernel_restart(char *cmd)
 {
 	kernel_restart_prepare(cmd);
@@ -370,6 +371,11 @@
 	else
 		printk(KERN_EMERG "Restarting system with command '%s'.\n", cmd);
 	kmsg_dump(KMSG_DUMP_RESTART);
+
+	if (http_restart) {
+		*((unsigned int*)0xa0e00000) = 0xdeadbeef;
+		*((unsigned int*)0xa0d00000) = 0xdeadbeef;
+	}
 	machine_restart(cmd);
 }
 EXPORT_SYMBOL_GPL(kernel_restart);
